{"ast":null,"code":"import axios from \"axios\";\nconst INITIAL_STATE = {\n  isFetching: false,\n  registerError: \"\",\n  registerSuccess: \"\"\n};\nconst REGISTER_START = \"REGISTER_START\";\nconst REGISTER_FAILURE = \"REGISTER_FAILURE\";\nconst REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const registerStart = () => ({\n  type: REGISTER_START\n});\nexport const registerFailure = message => ({\n  type: REGISTER_FAILURE,\n  payload: message\n});\nexport const registerSuccess = message => ({\n  type: REGISTER_SUCCESS,\n  payload: message\n});\nexport const register = user => async dispatch => {\n  try {\n    dispatch(registerStart());\n    const result = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/oturum/kayitol`, user);\n\n    if (result.status === 201) {\n      dispatch(registerSuccess(\"Kayıt Oldunuz\"));\n      return;\n    } //throw new Error()\n\n\n    dispatch(registerFailure(result.data.message));\n  } catch (err) {\n    console.log(err.response);\n  }\n};\nexport const registerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case REGISTER_START:\n      return { ...state,\n        isFetching: true\n      };\n\n    case REGISTER_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        registerSuccess: action.payload\n      };\n\n    case REGISTER_FAILURE:\n      return { ...state,\n        isFetching: false,\n        registerError: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/samet/dev/cv/react-quiz-app-ui/src/store/register.js"],"names":["axios","INITIAL_STATE","isFetching","registerError","registerSuccess","REGISTER_START","REGISTER_FAILURE","REGISTER_SUCCESS","registerStart","type","registerFailure","message","payload","register","user","dispatch","result","post","process","env","REACT_APP_API_BASE_URL","status","data","err","console","log","response","registerReducer","state","action"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE,KADQ;AAEpBC,EAAAA,aAAa,EAAE,EAFK;AAGpBC,EAAAA,eAAe,EAAE;AAHG,CAAtB;AAMA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AAEA,OAAO,MAAMC,aAAa,GAAG,OAAO;AAClCC,EAAAA,IAAI,EAAEJ;AAD4B,CAAP,CAAtB;AAIP,OAAO,MAAMK,eAAe,GAAIC,OAAD,KAAc;AAC3CF,EAAAA,IAAI,EAAEH,gBADqC;AAE3CM,EAAAA,OAAO,EAAED;AAFkC,CAAd,CAAxB;AAKP,OAAO,MAAMP,eAAe,GAAIO,OAAD,KAAc;AAC3CF,EAAAA,IAAI,EAAEF,gBADqC;AAE3CK,EAAAA,OAAO,EAAED;AAFkC,CAAd,CAAxB;AAKP,OAAO,MAAME,QAAQ,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACpD,MAAI;AACFA,IAAAA,QAAQ,CAACP,aAAa,EAAd,CAAR;AACA,UAAMQ,MAAM,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CAClB,GAAEC,OAAO,CAACC,GAAR,CAAYC,sBAAuB,iBADnB,EAEnBN,IAFmB,CAArB;;AAIA,QAAIE,MAAM,CAACK,MAAP,KAAkB,GAAtB,EAA2B;AACzBN,MAAAA,QAAQ,CAACX,eAAe,CAAC,eAAD,CAAhB,CAAR;AACA;AACD,KATC,CAUF;;;AACAW,IAAAA,QAAQ,CAACL,eAAe,CAACM,MAAM,CAACM,IAAP,CAAYX,OAAb,CAAhB,CAAR;AACD,GAZD,CAYE,OAAOY,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,QAAhB;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAG3B,aAAT,EAAwB4B,MAAxB,KAAmC;AAChE,UAAQA,MAAM,CAACpB,IAAf;AACE,SAAKJ,cAAL;AACE,aAAO,EAAE,GAAGuB,KAAL;AAAY1B,QAAAA,UAAU,EAAE;AAAxB,OAAP;;AACF,SAAKK,gBAAL;AACE,aAAO,EAAE,GAAGqB,KAAL;AAAY1B,QAAAA,UAAU,EAAE,KAAxB;AAA+BE,QAAAA,eAAe,EAAEyB,MAAM,CAACjB;AAAvD,OAAP;;AACF,SAAKN,gBAAL;AACE,aAAO,EAAE,GAAGsB,KAAL;AAAY1B,QAAAA,UAAU,EAAE,KAAxB;AAA+BC,QAAAA,aAAa,EAAE0B,MAAM,CAACjB;AAArD,OAAP;;AACF;AACE,aAAOgB,KAAP;AARJ;AAUD,CAXM","sourcesContent":["import axios from \"axios\";\n\nconst INITIAL_STATE = {\n  isFetching: false,\n  registerError: \"\",\n  registerSuccess: \"\",\n};\n\nconst REGISTER_START = \"REGISTER_START\";\nconst REGISTER_FAILURE = \"REGISTER_FAILURE\";\nconst REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\n\nexport const registerStart = () => ({\n  type: REGISTER_START,\n});\n\nexport const registerFailure = (message) => ({\n  type: REGISTER_FAILURE,\n  payload: message,\n});\n\nexport const registerSuccess = (message) => ({\n  type: REGISTER_SUCCESS,\n  payload: message,\n});\n\nexport const register = (user) => async (dispatch) => {\n  try {\n    dispatch(registerStart());\n    const result = await axios.post(\n      `${process.env.REACT_APP_API_BASE_URL}/oturum/kayitol`,\n      user\n    );\n    if (result.status === 201) {\n      dispatch(registerSuccess(\"Kayıt Oldunuz\"));\n      return;\n    }\n    //throw new Error()\n    dispatch(registerFailure(result.data.message));\n  } catch (err) {\n    console.log(err.response);\n  }\n};\n\nexport const registerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case REGISTER_START:\n      return { ...state, isFetching: true };\n    case REGISTER_SUCCESS:\n      return { ...state, isFetching: false, registerSuccess: action.payload };\n    case REGISTER_FAILURE:\n      return { ...state, isFetching: false, registerError: action.payload };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}