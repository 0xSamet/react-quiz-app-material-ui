{"ast":null,"code":"import axios from \"axios\";\nconst INITIAL_STATE = {\n  isFetching: false,\n  errorMessage: \"\",\n  successMessage: \"\",\n  quizzes: []\n};\nconst FETCH_START = \"FETCH_START\";\nconst FETCH_SUCCESS = \"FETCH_SUCCESS\";\nconst FETCH_FAILURE = \"FETCH_FAILURE\";\nconst CREATE_START = \"CREATE_START\";\nconst CREATE_SUCCESS = \"CREATE_SUCCESS\";\nconst CREATE_FAILURE = \"CREATE_FAILURE\";\nexport const fetchStart = () => ({\n  type: FETCH_START\n});\nexport const fetchSuccess = quizzes => ({\n  type: FETCH_SUCCESS,\n  payload: {\n    quizzes\n  }\n});\nexport const fetchFailure = () => ({\n  type: FETCH_FAILURE\n});\nexport const createStart = () => ({\n  type: CREATE_START\n});\nexport const createSuccess = message => ({\n  type: CREATE_SUCCESS,\n  payload: {\n    message\n  }\n});\nexport const createFailure = message => ({\n  type: CREATE_FAILURE,\n  payload: {\n    message\n  }\n});\nexport const fetchQuizzes = (query = \"\") => async dispatch => {\n  dispatch(fetchStart());\n\n  try {\n    const result = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/testler`, {\n      params: {\n        q: query\n      }\n    });\n\n    if (result.status === 200) {\n      dispatch(fetchSuccess(result.data));\n    } //console.log(result);\n\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const createQuiz = quiz => async dispatch => {\n  dispatch(createStart());\n\n  try {\n    const result = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/testler`, quiz, {\n      headers: {\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    });\n\n    if (result.data.message) {\n      dispatch(createFailure(result.data.message));\n      return;\n    }\n\n    dispatch(createSuccess(\"Test Oluşturuldu !\"));\n    console.log(result);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const quizzesReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FETCH_START:\n      return { ...state,\n        isFetching: true,\n        quizzes: []\n      };\n\n    case FETCH_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        quizzes: action.payload.quizzes\n      };\n\n    case FETCH_FAILURE:\n      return { ...state,\n        isFetching: false,\n        quizzes: [],\n        errorMessage: action.payload.errorMessage\n      };\n\n    case CREATE_START:\n      return { ...state,\n        isFetching: true\n      };\n\n    case CREATE_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        successMessage: action.payload.message\n      };\n\n    case CREATE_FAILURE:\n      return { ...state,\n        isFetching: false,\n        errorMessage: action.payload.message\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/samet/dev/cv/react-quiz-app-ui/src/store/quiz.js"],"names":["axios","INITIAL_STATE","isFetching","errorMessage","successMessage","quizzes","FETCH_START","FETCH_SUCCESS","FETCH_FAILURE","CREATE_START","CREATE_SUCCESS","CREATE_FAILURE","fetchStart","type","fetchSuccess","payload","fetchFailure","createStart","createSuccess","message","createFailure","fetchQuizzes","query","dispatch","result","get","process","env","REACT_APP_API_BASE_URL","params","q","status","data","err","console","log","createQuiz","quiz","post","headers","authorization","localStorage","getItem","quizzesReducer","state","action"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE,KADQ;AAEpBC,EAAAA,YAAY,EAAE,EAFM;AAGpBC,EAAAA,cAAc,EAAE,EAHI;AAIpBC,EAAAA,OAAO,EAAE;AAJW,CAAtB;AAOA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AAEA,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC/BC,EAAAA,IAAI,EAAEP;AADyB,CAAP,CAAnB;AAIP,OAAO,MAAMQ,YAAY,GAAIT,OAAD,KAAc;AACxCQ,EAAAA,IAAI,EAAEN,aADkC;AAExCQ,EAAAA,OAAO,EAAE;AACPV,IAAAA;AADO;AAF+B,CAAd,CAArB;AAOP,OAAO,MAAMW,YAAY,GAAG,OAAO;AACjCH,EAAAA,IAAI,EAAEL;AAD2B,CAAP,CAArB;AAIP,OAAO,MAAMS,WAAW,GAAG,OAAO;AAChCJ,EAAAA,IAAI,EAAEJ;AAD0B,CAAP,CAApB;AAIP,OAAO,MAAMS,aAAa,GAAIC,OAAD,KAAc;AACzCN,EAAAA,IAAI,EAAEH,cADmC;AAEzCK,EAAAA,OAAO,EAAE;AACPI,IAAAA;AADO;AAFgC,CAAd,CAAtB;AAOP,OAAO,MAAMC,aAAa,GAAID,OAAD,KAAc;AACzCN,EAAAA,IAAI,EAAEF,cADmC;AAEzCI,EAAAA,OAAO,EAAE;AACPI,IAAAA;AADO;AAFgC,CAAd,CAAtB;AAOP,OAAO,MAAME,YAAY,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgB,MAAOC,QAAP,IAAoB;AAC9DA,EAAAA,QAAQ,CAACX,UAAU,EAAX,CAAR;;AACA,MAAI;AACF,UAAMY,MAAM,GAAG,MAAMxB,KAAK,CAACyB,GAAN,CAClB,GAAEC,OAAO,CAACC,GAAR,CAAYC,sBAAuB,UADnB,EAEnB;AACEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,CAAC,EAAER;AADG;AADV,KAFmB,CAArB;;AAQA,QAAIE,MAAM,CAACO,MAAP,KAAkB,GAAtB,EAA2B;AACzBR,MAAAA,QAAQ,CAACT,YAAY,CAACU,MAAM,CAACQ,IAAR,CAAb,CAAR;AACD,KAXC,CAYF;;AACD,GAbD,CAaE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CAlBM;AAoBP,OAAO,MAAMG,UAAU,GAAIC,IAAD,IAAU,MAAOd,QAAP,IAAoB;AACtDA,EAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;;AACA,MAAI;AACF,UAAMO,MAAM,GAAG,MAAMxB,KAAK,CAACsC,IAAN,CAClB,GAAEZ,OAAO,CAACC,GAAR,CAAYC,sBAAuB,UADnB,EAEnBS,IAFmB,EAGnB;AACEE,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AADhD;AADX,KAHmB,CAArB;;AASA,QAAIlB,MAAM,CAACQ,IAAP,CAAYb,OAAhB,EAAyB;AACvBI,MAAAA,QAAQ,CAACH,aAAa,CAACI,MAAM,CAACQ,IAAP,CAAYb,OAAb,CAAd,CAAR;AACA;AACD;;AACDI,IAAAA,QAAQ,CAACL,aAAa,CAAC,oBAAD,CAAd,CAAR;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AACD,GAhBD,CAgBE,OAAOS,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CArBM;AAuBP,OAAO,MAAMU,cAAc,GAAG,CAACC,KAAK,GAAG3C,aAAT,EAAwB4C,MAAxB,KAAmC;AAC/D,UAAQA,MAAM,CAAChC,IAAf;AACE,SAAKP,WAAL;AACE,aAAO,EAAE,GAAGsC,KAAL;AAAY1C,QAAAA,UAAU,EAAE,IAAxB;AAA8BG,QAAAA,OAAO,EAAE;AAAvC,OAAP;;AACF,SAAKE,aAAL;AACE,aAAO,EAAE,GAAGqC,KAAL;AAAY1C,QAAAA,UAAU,EAAE,KAAxB;AAA+BG,QAAAA,OAAO,EAAEwC,MAAM,CAAC9B,OAAP,CAAeV;AAAvD,OAAP;;AACF,SAAKG,aAAL;AACE,aAAO,EACL,GAAGoC,KADE;AAEL1C,QAAAA,UAAU,EAAE,KAFP;AAGLG,QAAAA,OAAO,EAAE,EAHJ;AAILF,QAAAA,YAAY,EAAE0C,MAAM,CAAC9B,OAAP,CAAeZ;AAJxB,OAAP;;AAMF,SAAKM,YAAL;AACE,aAAO,EACL,GAAGmC,KADE;AAEL1C,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAIF,SAAKQ,cAAL;AACE,aAAO,EACL,GAAGkC,KADE;AAEL1C,QAAAA,UAAU,EAAE,KAFP;AAGLE,QAAAA,cAAc,EAAEyC,MAAM,CAAC9B,OAAP,CAAeI;AAH1B,OAAP;;AAKF,SAAKR,cAAL;AACE,aAAO,EACL,GAAGiC,KADE;AAEL1C,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,YAAY,EAAE0C,MAAM,CAAC9B,OAAP,CAAeI;AAHxB,OAAP;;AAKF;AACE,aAAOyB,KAAP;AA9BJ;AAgCD,CAjCM","sourcesContent":["import axios from \"axios\";\n\nconst INITIAL_STATE = {\n  isFetching: false,\n  errorMessage: \"\",\n  successMessage: \"\",\n  quizzes: [],\n};\n\nconst FETCH_START = \"FETCH_START\";\nconst FETCH_SUCCESS = \"FETCH_SUCCESS\";\nconst FETCH_FAILURE = \"FETCH_FAILURE\";\nconst CREATE_START = \"CREATE_START\";\nconst CREATE_SUCCESS = \"CREATE_SUCCESS\";\nconst CREATE_FAILURE = \"CREATE_FAILURE\";\n\nexport const fetchStart = () => ({\n  type: FETCH_START,\n});\n\nexport const fetchSuccess = (quizzes) => ({\n  type: FETCH_SUCCESS,\n  payload: {\n    quizzes,\n  },\n});\n\nexport const fetchFailure = () => ({\n  type: FETCH_FAILURE,\n});\n\nexport const createStart = () => ({\n  type: CREATE_START,\n});\n\nexport const createSuccess = (message) => ({\n  type: CREATE_SUCCESS,\n  payload: {\n    message,\n  },\n});\n\nexport const createFailure = (message) => ({\n  type: CREATE_FAILURE,\n  payload: {\n    message,\n  },\n});\n\nexport const fetchQuizzes = (query = \"\") => async (dispatch) => {\n  dispatch(fetchStart());\n  try {\n    const result = await axios.get(\n      `${process.env.REACT_APP_API_BASE_URL}/testler`,\n      {\n        params: {\n          q: query,\n        },\n      }\n    );\n    if (result.status === 200) {\n      dispatch(fetchSuccess(result.data));\n    }\n    //console.log(result);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createQuiz = (quiz) => async (dispatch) => {\n  dispatch(createStart());\n  try {\n    const result = await axios.post(\n      `${process.env.REACT_APP_API_BASE_URL}/testler`,\n      quiz,\n      {\n        headers: {\n          authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      }\n    );\n    if (result.data.message) {\n      dispatch(createFailure(result.data.message));\n      return;\n    }\n    dispatch(createSuccess(\"Test Oluşturuldu !\"));\n    console.log(result);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const quizzesReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FETCH_START:\n      return { ...state, isFetching: true, quizzes: [] };\n    case FETCH_SUCCESS:\n      return { ...state, isFetching: false, quizzes: action.payload.quizzes };\n    case FETCH_FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        quizzes: [],\n        errorMessage: action.payload.errorMessage,\n      };\n    case CREATE_START:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case CREATE_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        successMessage: action.payload.message,\n      };\n    case CREATE_FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        errorMessage: action.payload.message,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}